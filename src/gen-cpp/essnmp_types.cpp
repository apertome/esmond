/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "essnmp_types.h"

namespace ESSNMP {

char* OIDType::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
uint8_t OIDType::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t OIDType::read(facebook::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  facebook::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using facebook::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == facebook::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OIDType::write(facebook::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OIDType");
  xfer += oprot->writeFieldBegin("id", facebook::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", facebook::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

char* OIDCorrelator::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
uint8_t OIDCorrelator::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t OIDCorrelator::read(facebook::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  facebook::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using facebook::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == facebook::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OIDCorrelator::write(facebook::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OIDCorrelator");
  xfer += oprot->writeFieldBegin("id", facebook::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", facebook::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

char* OID::ascii_fingerprint = "4FFDF20C4BBE097F6867A04CBE601C32";
uint8_t OID::binary_fingerprint[16] = {0x4F,0xFD,0xF2,0x0C,0x4B,0xBE,0x09,0x7F,0x68,0x67,0xA0,0x4C,0xBE,0x60,0x1C,0x32};

uint32_t OID::read(facebook::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  facebook::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using facebook::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == facebook::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->oidtypeid);
          this->__isset.oidtypeid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->oidcorrelatorid);
          this->__isset.oidcorrelatorid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OID::write(facebook::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OID");
  xfer += oprot->writeFieldBegin("id", facebook::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", facebook::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("oidtypeid", facebook::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->oidtypeid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("oidcorrelatorid", facebook::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->oidcorrelatorid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

char* Poller::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
uint8_t Poller::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t Poller::read(facebook::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  facebook::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using facebook::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == facebook::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Poller::write(facebook::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Poller");
  xfer += oprot->writeFieldBegin("id", facebook::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", facebook::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

char* OIDSet::ascii_fingerprint = "D3B5D743738D33B8A4323CE1DF372FE6";
uint8_t OIDSet::binary_fingerprint[16] = {0xD3,0xB5,0xD7,0x43,0x73,0x8D,0x33,0xB8,0xA4,0x32,0x3C,0xE1,0xDF,0x37,0x2F,0xE6};

uint32_t OIDSet::read(facebook::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  facebook::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using facebook::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == facebook::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->frequency);
          this->__isset.frequency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == facebook::thrift::protocol::T_LIST) {
          {
            this->oids.clear();
            uint32_t _size0;
            facebook::thrift::protocol::TType _etype3;
            iprot->readListBegin(_etype3, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              OID _elem5;
              xfer += _elem5.read(iprot);
              this->oids.push_back(_elem5);
            }
            iprot->readListEnd();
          }
          this->__isset.oids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pollerid);
          this->__isset.pollerid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OIDSet::write(facebook::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OIDSet");
  xfer += oprot->writeFieldBegin("id", facebook::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", facebook::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("frequency", facebook::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->frequency);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("oids", facebook::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(facebook::thrift::protocol::T_STRUCT, this->oids.size());
    std::vector<OID> ::const_iterator _iter6;
    for (_iter6 = this->oids.begin(); _iter6 != this->oids.end(); ++_iter6)
    {
      xfer += (*_iter6).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("pollerid", facebook::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->pollerid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

char* DeviceTag::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
uint8_t DeviceTag::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t DeviceTag::read(facebook::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  facebook::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using facebook::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == facebook::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeviceTag::write(facebook::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DeviceTag");
  xfer += oprot->writeFieldBegin("id", facebook::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", facebook::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

char* Device::ascii_fingerprint = "6DF9EB9C770C375172E403E9353CF73C";
uint8_t Device::binary_fingerprint[16] = {0x6D,0xF9,0xEB,0x9C,0x77,0x0C,0x37,0x51,0x72,0xE4,0x03,0xE9,0x35,0x3C,0xF7,0x3C};

uint32_t Device::read(facebook::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  facebook::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using facebook::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == facebook::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->begin_time);
          this->__isset.begin_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->end_time);
          this->__isset.end_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->community);
          this->__isset.community = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == facebook::thrift::protocol::T_LIST) {
          {
            this->oidsets.clear();
            uint32_t _size7;
            facebook::thrift::protocol::TType _etype10;
            iprot->readListBegin(_etype10, _size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              OIDSet _elem12;
              xfer += _elem12.read(iprot);
              this->oidsets.push_back(_elem12);
            }
            iprot->readListEnd();
          }
          this->__isset.oidsets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == facebook::thrift::protocol::T_LIST) {
          {
            this->tags.clear();
            uint32_t _size13;
            facebook::thrift::protocol::TType _etype16;
            iprot->readListBegin(_etype16, _size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              DeviceTag _elem18;
              xfer += _elem18.read(iprot);
              this->tags.push_back(_elem18);
            }
            iprot->readListEnd();
          }
          this->__isset.tags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Device::write(facebook::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Device");
  xfer += oprot->writeFieldBegin("id", facebook::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", facebook::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("begin_time", facebook::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->begin_time);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("end_time", facebook::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->end_time);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("community", facebook::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->community);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("oidsets", facebook::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(facebook::thrift::protocol::T_STRUCT, this->oidsets.size());
    std::vector<OIDSet> ::const_iterator _iter19;
    for (_iter19 = this->oidsets.begin(); _iter19 != this->oidsets.end(); ++_iter19)
    {
      xfer += (*_iter19).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("tags", facebook::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(facebook::thrift::protocol::T_STRUCT, this->tags.size());
    std::vector<DeviceTag> ::const_iterator _iter20;
    for (_iter20 = this->tags.begin(); _iter20 != this->tags.end(); ++_iter20)
    {
      xfer += (*_iter20).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

char* IfRef::ascii_fingerprint = "229734C05FBBCEE1EFB6C57FE7D97BA7";
uint8_t IfRef::binary_fingerprint[16] = {0x22,0x97,0x34,0xC0,0x5F,0xBB,0xCE,0xE1,0xEF,0xB6,0xC5,0x7F,0xE7,0xD9,0x7B,0xA7};

uint32_t IfRef::read(facebook::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  facebook::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using facebook::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == facebook::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->deviceid);
          this->__isset.deviceid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ifindex);
          this->__isset.ifindex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ifdescr);
          this->__isset.ifdescr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ifalias);
          this->__isset.ifalias = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ipaddr);
          this->__isset.ipaddr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ifspeed);
          this->__isset.ifspeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ifhighspeed);
          this->__isset.ifhighspeed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->connection);
          this->__isset.connection = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->conntype);
          this->__isset.conntype = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usage);
          this->__isset.usage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->visibility);
          this->__isset.visibility = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->grouping);
          this->__isset.grouping = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->begin_time);
          this->__isset.begin_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->end_time);
          this->__isset.end_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IfRef::write(facebook::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("IfRef");
  xfer += oprot->writeFieldBegin("id", facebook::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("deviceid", facebook::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->deviceid);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("ifindex", facebook::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->ifindex);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("ifdescr", facebook::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->ifdescr);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("ifalias", facebook::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->ifalias);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("ipaddr", facebook::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->ipaddr);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("ifspeed", facebook::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->ifspeed);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("ifhighspeed", facebook::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->ifhighspeed);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("connection", facebook::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->connection);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("conntype", facebook::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->conntype);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("usage", facebook::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->usage);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("visibility", facebook::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->visibility);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("grouping", facebook::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->grouping);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("begin_time", facebook::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->begin_time);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("end_time", facebook::thrift::protocol::T_I32, 15);
  xfer += oprot->writeI32(this->end_time);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

char* Counter32::ascii_fingerprint = "1584BE3F33D288DCC74EA52051285D05";
uint8_t Counter32::binary_fingerprint[16] = {0x15,0x84,0xBE,0x3F,0x33,0xD2,0x88,0xDC,0xC7,0x4E,0xA5,0x20,0x51,0x28,0x5D,0x05};

uint32_t Counter32::read(facebook::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  facebook::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using facebook::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == facebook::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == facebook::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == facebook::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->type_id);
          this->__isset.type_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Counter32::write(facebook::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Counter32");
  xfer += oprot->writeFieldBegin("flags", facebook::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->flags);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("timestamp", facebook::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->timestamp);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("value", facebook::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->value);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("version", facebook::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->version);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("type_id", facebook::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->type_id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

char* Counter64::ascii_fingerprint = "69A1F04B78C98B1472CB21557BA4DB9E";
uint8_t Counter64::binary_fingerprint[16] = {0x69,0xA1,0xF0,0x4B,0x78,0xC9,0x8B,0x14,0x72,0xCB,0x21,0x55,0x7B,0xA4,0xDB,0x9E};

uint32_t Counter64::read(facebook::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  facebook::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using facebook::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == facebook::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == facebook::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == facebook::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == facebook::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->type_id);
          this->__isset.type_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Counter64::write(facebook::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Counter64");
  xfer += oprot->writeFieldBegin("flags", facebook::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->flags);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("timestamp", facebook::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->timestamp);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("value", facebook::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->value);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("version", facebook::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->version);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("type_id", facebook::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->type_id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

char* Gauge32::ascii_fingerprint = "1584BE3F33D288DCC74EA52051285D05";
uint8_t Gauge32::binary_fingerprint[16] = {0x15,0x84,0xBE,0x3F,0x33,0xD2,0x88,0xDC,0xC7,0x4E,0xA5,0x20,0x51,0x28,0x5D,0x05};

uint32_t Gauge32::read(facebook::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  facebook::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using facebook::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == facebook::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == facebook::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == facebook::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->type_id);
          this->__isset.type_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Gauge32::write(facebook::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Gauge32");
  xfer += oprot->writeFieldBegin("flags", facebook::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->flags);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("timestamp", facebook::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->timestamp);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("value", facebook::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->value);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("version", facebook::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->version);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("type_id", facebook::thrift::protocol::T_BYTE, 5);
  xfer += oprot->writeByte(this->type_id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

char* VarList::ascii_fingerprint = "26D3E4151EFAFDFC816998704F3D421D";
uint8_t VarList::binary_fingerprint[16] = {0x26,0xD3,0xE4,0x15,0x1E,0xFA,0xFD,0xFC,0x81,0x69,0x98,0x70,0x4F,0x3D,0x42,0x1D};

uint32_t VarList::read(facebook::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  facebook::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using facebook::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == facebook::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == facebook::thrift::protocol::T_LIST) {
          {
            this->counter32.clear();
            uint32_t _size21;
            facebook::thrift::protocol::TType _etype24;
            iprot->readListBegin(_etype24, _size21);
            uint32_t _i25;
            for (_i25 = 0; _i25 < _size21; ++_i25)
            {
              Counter32 _elem26;
              xfer += _elem26.read(iprot);
              this->counter32.push_back(_elem26);
            }
            iprot->readListEnd();
          }
          this->__isset.counter32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == facebook::thrift::protocol::T_LIST) {
          {
            this->counter64.clear();
            uint32_t _size27;
            facebook::thrift::protocol::TType _etype30;
            iprot->readListBegin(_etype30, _size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              Counter64 _elem32;
              xfer += _elem32.read(iprot);
              this->counter64.push_back(_elem32);
            }
            iprot->readListEnd();
          }
          this->__isset.counter64 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == facebook::thrift::protocol::T_LIST) {
          {
            this->gauge32.clear();
            uint32_t _size33;
            facebook::thrift::protocol::TType _etype36;
            iprot->readListBegin(_etype36, _size33);
            uint32_t _i37;
            for (_i37 = 0; _i37 < _size33; ++_i37)
            {
              Gauge32 _elem38;
              xfer += _elem38.read(iprot);
              this->gauge32.push_back(_elem38);
            }
            iprot->readListEnd();
          }
          this->__isset.gauge32 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VarList::write(facebook::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("VarList");
  xfer += oprot->writeFieldBegin("counter32", facebook::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(facebook::thrift::protocol::T_STRUCT, this->counter32.size());
    std::vector<Counter32> ::const_iterator _iter39;
    for (_iter39 = this->counter32.begin(); _iter39 != this->counter32.end(); ++_iter39)
    {
      xfer += (*_iter39).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("counter64", facebook::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(facebook::thrift::protocol::T_STRUCT, this->counter64.size());
    std::vector<Counter64> ::const_iterator _iter40;
    for (_iter40 = this->counter64.begin(); _iter40 != this->counter64.end(); ++_iter40)
    {
      xfer += (*_iter40).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("gauge32", facebook::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(facebook::thrift::protocol::T_STRUCT, this->gauge32.size());
    std::vector<Gauge32> ::const_iterator _iter41;
    for (_iter41 = this->gauge32.begin(); _iter41 != this->gauge32.end(); ++_iter41)
    {
      xfer += (*_iter41).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

char* SNMPPollResultPair::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
uint8_t SNMPPollResultPair::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t SNMPPollResultPair::read(facebook::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  facebook::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using facebook::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == facebook::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->OIDName);
          this->__isset.OIDName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SNMPPollResultPair::write(facebook::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SNMPPollResultPair");
  xfer += oprot->writeFieldBegin("OIDName", facebook::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->OIDName);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("value", facebook::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

char* SNMPPollResult::ascii_fingerprint = "A120DB3C7D3315EC9ABE6E56137F87EB";
uint8_t SNMPPollResult::binary_fingerprint[16] = {0xA1,0x20,0xDB,0x3C,0x7D,0x33,0x15,0xEC,0x9A,0xBE,0x6E,0x56,0x13,0x7F,0x87,0xEB};

uint32_t SNMPPollResult::read(facebook::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  facebook::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using facebook::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == facebook::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->device_id);
          this->__isset.device_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->oidset_id);
          this->__isset.oidset_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == facebook::thrift::protocol::T_LIST) {
          {
            this->vars.clear();
            uint32_t _size42;
            facebook::thrift::protocol::TType _etype45;
            iprot->readListBegin(_etype45, _size42);
            uint32_t _i46;
            for (_i46 = 0; _i46 < _size42; ++_i46)
            {
              std::vector<std::string>  _elem47;
              {
                _elem47.clear();
                uint32_t _size48;
                facebook::thrift::protocol::TType _etype51;
                iprot->readListBegin(_etype51, _size48);
                uint32_t _i52;
                for (_i52 = 0; _i52 < _size48; ++_i52)
                {
                  std::string _elem53;
                  xfer += iprot->readString(_elem53);
                  _elem47.push_back(_elem53);
                }
                iprot->readListEnd();
              }
              this->vars.push_back(_elem47);
            }
            iprot->readListEnd();
          }
          this->__isset.vars = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SNMPPollResult::write(facebook::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SNMPPollResult");
  xfer += oprot->writeFieldBegin("device_id", facebook::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->device_id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("oidset_id", facebook::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->oidset_id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("timestamp", facebook::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->timestamp);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("vars", facebook::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(facebook::thrift::protocol::T_LIST, this->vars.size());
    std::vector<std::vector<std::string> > ::const_iterator _iter54;
    for (_iter54 = this->vars.begin(); _iter54 != this->vars.end(); ++_iter54)
    {
      {
        xfer += oprot->writeListBegin(facebook::thrift::protocol::T_STRING, (*_iter54).size());
        std::vector<std::string> ::const_iterator _iter55;
        for (_iter55 = (*_iter54).begin(); _iter55 != (*_iter54).end(); ++_iter55)
        {
          xfer += oprot->writeString((*_iter55));
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

char* Rate::ascii_fingerprint = "0B663F1913C9C6F43150B524A8B76386";
uint8_t Rate::binary_fingerprint[16] = {0x0B,0x66,0x3F,0x19,0x13,0xC9,0xC6,0xF4,0x31,0x50,0xB5,0x24,0xA8,0xB7,0x63,0x86};

uint32_t Rate::read(facebook::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  facebook::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using facebook::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == facebook::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == facebook::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rate);
          this->__isset.rate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Rate::write(facebook::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Rate");
  xfer += oprot->writeFieldBegin("timestamp", facebook::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->timestamp);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("rate", facebook::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->rate);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

char* ESDBError::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
uint8_t ESDBError::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ESDBError::read(facebook::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  facebook::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using facebook::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == facebook::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->what);
          this->__isset.what = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ESDBError::write(facebook::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ESDBError");
  xfer += oprot->writeFieldBegin("what", facebook::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->what);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

} // namespace
