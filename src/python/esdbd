#!/usr/bin/env python

import threading
from calendar import timegm

from thrift.transport import TSocket, TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer

import tsdb

from essnmp.config import ESConfig
from essnmp.sql import *
from essnmp.thrift import ESDB
from essnmp.thrift.ipaclsocket import IPACLSocket
import essnmp.thrift.ttypes
from essnmp.poll import remove_metachars

class ESDBHandler(object):
    def __init__(self):
        essnmp.sql.setup_db("postgres:///essnmp")
        self.session = create_session(essnmp.sql.vars['db'])
        self.tsdb = tsdb.TSDB("/data/essnmp/tsdb")
        self.device_threads = {}

    def list_devices(self):
        return [d.name for d in self.session.query(Device).select()]

    def get_device(self,name):
        r = self.session.query(Device).select_by(name=name)[0]
        print r.begin_time, r.end_time

        if type(r.begin_time) is not int:
            r.begin_time = timegm(r.begin_time.utctimetuple())
            if r.begin_time < 0:
                r.begin_time = 0
    
            r.end_time = timegm(r.end_time.utctimetuple())
            if r.end_time > 2**31-1:
                r.end_time = 2**31-1
            
        return r

    def get_all_devices(self):
        d = {}
        for device in self.list_devices():
            d[device] = self.get_device(device)

        return d


    def add_device(self, device):
        self.session.save(device)
        self.session.flush()

    def list_oids(self):
        return [o.name for o in self.session.query(OID).select()]

    def get_oid(self,name):
        return self.session.query(OID).select_by(name=name)[0]

    def list_oidsets(self):
        return [s.name for s in self.session.query(OIDSet).select()]

    def get_oidset(self,name):
        return self.session.query(OIDSet).select_by(name=name)[0]

    def select(self, device, iface_name, oidset, oid, begin_time, end_time,
            flags, cf, resolution):
        """
        Returns raw data.

        If resolution is None, return the native resolution of the variable.
        """

        if cf != "AVERAGE":
            raise essnmp.thrift.ttypes.ESDBError(
                    dict(what="unsupported consolidation function: %s" % cf))

        iface_name = remove_metachars(iface_name)

        var = self.tsdb.get_var("/".join((device, oidset, oid, iface_name)))
        data = var.select(int(begin_time), int(end_time))

        l = []

        for datum in data:
            l.append(datum)

        result = essnmp.thrift.ttypes.VarList()

        if isinstance(l[0], essnmp.thrift.ttypes.Counter32):
            result.counter32 = l
        elif isinstance(l[0], essnmp.thrift.ttypes.Counter64):
            result.counter64 = l
        elif isinstance(l[0], essnmp.thrift.ttypes.Gauge32):
            result.gauge32 = l
        else:
            raise essnmp.thrift.ttypes.ESDBError(
                    dict(what="unknown return type from TSDB select"))

        return result

#
# Make tsdb types Thrifty
#
tsdb.Counter32.__bases__ += (essnmp.thrift.ttypes.Counter32, )
tsdb.Counter64.__bases__ += (essnmp.thrift.ttypes.Counter64, )
tsdb.Gauge32.__bases__ += (essnmp.thrift.ttypes.Gauge32, )

handler = ESDBHandler()
processor = ESDB.Processor(handler)
transport = IPACLSocket(9090, []) #TSocket.TServerSocket(9090)
tfactory = TTransport.TBufferedTransportFactory()
pfactory = TBinaryProtocol.TBinaryProtocolFactory()

server = TServer.TThreadedServer(processor, transport, tfactory, pfactory)

server.serve()
