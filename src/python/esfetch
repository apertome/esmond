#!/usr/bin/env python

"""
esfetch emulates the rrdfetch tool.

the file is a key that can be used to find data in the ESxSNMP datastore.
the file field has the following form:

    device,collection_group,interface

Currently the FastPoll and FastPollHC collection groups are understood.
Currently the only consolidation function understood is AVERAGE
"""

import sys
import optparse
from pprint import pprint

from essnmp.util import get_ESDB_client

def output_data(data):
    pprint(data)
    
    if data.has_key('ifHCInOctets'):
        lin = data["ifHCInOctets"].counter64
        lout = data["ifHCOutOctets"].counter64
    else:
        lin = data["ifInOctets"].counter32
        lout = data["ifOutOctets"].counter32

    for i in range(1, len(lin)):
        print lin[i].timestamp, lin[i].value - lin[i-1].value, lout[i].value - lout[i-1].value

def fetch_data(device, iface_name, oidset, begin, end, CF, resolution):
    (transport, client) = get_ESDB_client()
    transport.open()

    if oidset == 'FastPollHC':
        oids = ('ifHCInOctets', 'ifHCOutOctets')
    else:
        oids = ('ifInOctets', 'ifOutOctets')

    data = {}
    for oid in oids:
        data[oid] = client.select(device, iface_name, oidset, oid, begin, end,
                None, CF, resolution)

    transport.close()
    return data

def main(argv):
    oparse = optparse.OptionParser(usage="%prog fetch file CF [options]")
    oparse.add_option("-d", "--debug", dest="debug", action="store_true",
            default=False, help="enable debugging")
    oparse.add_option("-b", "--begin", dest="begin", help="begin time",
            default=None)
    oparse.add_option("-e", "--end", dest="end", help="end time", default=None)
    oparse.add_option("-r", "--resolution", dest="resolution", default=None,
            help="resolution of dataset (default is native resolution)")

    if argv[0] != 'fetch':
        oparse.error("only fetch is implemented")

    if len(argv) < 3:
        oparse.error("must specify file and CF")

    (file, CF) = argv[1:3]
    (opts, args) = oparse.parse_args(args=argv[3:])

    (device, oidset, iface_name) = file.split(',')
   
    output_data(fetch_data(device, iface_name, oidset, opts.begin, opts.end, CF, opts.resolution))

if __name__ == '__main__':
    main(sys.argv[1:])
