#!/usr/bin/env python

import threading
import time
import pprint

import yapsnmp

from thrift import Thrift
from thrift.transport import TSocket, TTransport
from thrift.protocol import TBinaryProtocol

from essnmp.thrift import ESDB

class ESSNMPPollManager(object):
    """Starts a polling thread for each device"""

    def __init__(self):
        self.transport = TSocket.TSocket('localhost', 9090)
        self.transport = TTransport.TBufferedTransport(self.transport)
        self.protocol = TBinaryProtocol.TBinaryProtocol(self.transport)
        self.client = ESDB.Client(self.protocol)
        self.transport.open()

        self.devices = self.client.get_all_devices()
        self.threads = {}

    def start_polling(self):
        """Begin polling all routers for all OIDSets"""
        for device in self.devices:
            for oidset in self.devices[device].oidsets:
                name = "%s_%s" % (device,oidset.name)
                self.threads[name] = ESSNMPPoller(name=name,device=self.devices[device],oidset=oidset)
                self.threads[name].start()


class ESSNMPPoller(threading.Thread):
    """Handles polling of an OIDSet for a device"""
    def __init__(self,name,device,oidset):
        self.name = name
        self.device = device
        self.oidset = oidset

        self.next_poll = int(time.time() - 1)
        self.oids = [o.name for o in self.oidset.oids]
        self.running = True

        print "connecting to",self.device.name
        self.session = yapsnmp.Session(self.device.name, version=2,
                community=self.device.community)

        threading.Thread.__init__(self, name=name)

    def run(self):
        while self.running:
            print time.time(),"hello from",self.name

            for oid in self.oids:
                if time.time() > self.next_poll:
                    print self.name,"grabbing",self.oids
                    self.next_poll += self.oidset.frequency
                    begin = time.time()
                    cnt = 0
                    for oid in self.oids:
                        cnt += len(self.session.walk(oid))
                    print self.name,"grabbed %d vars in %f seconds" % (cnt, time.time() - begin)
                    print self.name,"next",self.next_poll

            time.sleep(self.next_poll - int(time.time()))

pm = ESSNMPPollManager()

pm.start_polling()
