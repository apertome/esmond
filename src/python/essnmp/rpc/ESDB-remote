#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import ESDB
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '   list_devices(bool active)'
  print '  Device get_device(string name)'
  print '   get_all_devices(bool active)'
  print '  void add_device(string name, string begin_time, string end_time)'
  print '  void update_device(string name, string begin_time, string end_time)'
  print '   list_device_oidsets(Device device)'
  print '   list_oids()'
  print '  OID get_oid(string name)'
  print '  void add_oid(string name, string storage, string oidtype)'
  print '   list_oidsets()'
  print '  OIDSet get_oidset(string name)'
  print '   get_oidset_devices(OIDSet oidset)'
  print '  VarList get_vars_by_grouping(Grouping grouping)'
  print '  byte store_poll_result(SNMPPollResult result)'
  print '  VarList select(string device, string iface_name, string oidset, string oid, string begin_time, string end_time, string flags, string cf, string resolution)'
  print '   get_interfaces(string device, bool has_descr)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':') 
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':') 
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = ESDB.Client(protocol)
transport.open()

if cmd == 'list_devices':
  if len(args) != 1:
    print 'list_devices requires 1 args'
    sys.exit(1)
  pp.pprint(client.list_devices(eval(args[0]),))

elif cmd == 'get_device':
  if len(args) != 1:
    print 'get_device requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_device(args[0],))

elif cmd == 'get_all_devices':
  if len(args) != 1:
    print 'get_all_devices requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_all_devices(eval(args[0]),))

elif cmd == 'add_device':
  if len(args) != 3:
    print 'add_device requires 3 args'
    sys.exit(1)
  pp.pprint(client.add_device(args[0],args[1],args[2],))

elif cmd == 'update_device':
  if len(args) != 3:
    print 'update_device requires 3 args'
    sys.exit(1)
  pp.pprint(client.update_device(args[0],args[1],args[2],))

elif cmd == 'list_device_oidsets':
  if len(args) != 1:
    print 'list_device_oidsets requires 1 args'
    sys.exit(1)
  pp.pprint(client.list_device_oidsets(eval(args[0]),))

elif cmd == 'list_oids':
  if len(args) != 0:
    print 'list_oids requires 0 args'
    sys.exit(1)
  pp.pprint(client.list_oids())

elif cmd == 'get_oid':
  if len(args) != 1:
    print 'get_oid requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_oid(args[0],))

elif cmd == 'add_oid':
  if len(args) != 3:
    print 'add_oid requires 3 args'
    sys.exit(1)
  pp.pprint(client.add_oid(args[0],args[1],args[2],))

elif cmd == 'list_oidsets':
  if len(args) != 0:
    print 'list_oidsets requires 0 args'
    sys.exit(1)
  pp.pprint(client.list_oidsets())

elif cmd == 'get_oidset':
  if len(args) != 1:
    print 'get_oidset requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_oidset(args[0],))

elif cmd == 'get_oidset_devices':
  if len(args) != 1:
    print 'get_oidset_devices requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_oidset_devices(eval(args[0]),))

elif cmd == 'get_vars_by_grouping':
  if len(args) != 1:
    print 'get_vars_by_grouping requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_vars_by_grouping(eval(args[0]),))

elif cmd == 'store_poll_result':
  if len(args) != 1:
    print 'store_poll_result requires 1 args'
    sys.exit(1)
  pp.pprint(client.store_poll_result(eval(args[0]),))

elif cmd == 'select':
  if len(args) != 9:
    print 'select requires 9 args'
    sys.exit(1)
  pp.pprint(client.select(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],))

elif cmd == 'get_interfaces':
  if len(args) != 2:
    print 'get_interfaces requires 2 args'
    sys.exit(1)
  pp.pprint(client.get_interfaces(args[0],eval(args[1]),))

transport.close()
