/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef ESDB_H
#define ESDB_H

#include <TProcessor.h>
#include "essnmp_types.h"

namespace ESSNMP { 

class ESDBIf {
 public: 
  virtual ~ESDBIf() {}
  virtual void list_devices(std::vector<std::string> & _return) = 0;
  virtual void get_device(Device& _return, const std::string& name) = 0;
  virtual void get_all_devices(std::map<std::string, Device> & _return) = 0;
  virtual void add_device(const std::string& name, const std::string& begin_time, const std::string& end_time) = 0;
  virtual void update_device(const std::string& name, const std::string& begin_time, const std::string& end_time) = 0;
  virtual void list_device_oidsets(std::vector<OIDSet> & _return, const Device& device) = 0;
  virtual void list_oids(std::vector<std::string> & _return) = 0;
  virtual void get_oid(OID& _return, const std::string& name) = 0;
  virtual void add_oid(const std::string& name, const std::string& storage, const std::string& oidtype) = 0;
  virtual void list_oidsets(std::vector<std::string> & _return) = 0;
  virtual void get_oidset(OIDSet& _return, const std::string& name) = 0;
  virtual void get_oidset_devices(std::vector<Device> & _return, const OIDSet& oidset) = 0;
  virtual void get_vars_by_grouping(VarList& _return, const Grouping grouping) = 0;
  virtual void insert_counter32(const std::vector<Var> & vars, const std::vector<Counter32> & values) = 0;
  virtual void insert_counter64(const std::vector<Var> & vars, const std::vector<Counter64> & values) = 0;
  virtual void insert_gauge32(const std::vector<Var> & vars, const std::vector<Gauge32> & values) = 0;
}; 

class ESDBNull : virtual public ESDBIf {
 public: 
  virtual ~ESDBNull() {}
  void list_devices(std::vector<std::string> & _return) {
    return;
  }
  void get_device(Device& _return, const std::string& name) {
    return;
  }
  void get_all_devices(std::map<std::string, Device> & _return) {
    return;
  }
  void add_device(const std::string& name, const std::string& begin_time, const std::string& end_time) {
    return;
  }
  void update_device(const std::string& name, const std::string& begin_time, const std::string& end_time) {
    return;
  }
  void list_device_oidsets(std::vector<OIDSet> & _return, const Device& device) {
    return;
  }
  void list_oids(std::vector<std::string> & _return) {
    return;
  }
  void get_oid(OID& _return, const std::string& name) {
    return;
  }
  void add_oid(const std::string& name, const std::string& storage, const std::string& oidtype) {
    return;
  }
  void list_oidsets(std::vector<std::string> & _return) {
    return;
  }
  void get_oidset(OIDSet& _return, const std::string& name) {
    return;
  }
  void get_oidset_devices(std::vector<Device> & _return, const OIDSet& oidset) {
    return;
  }
  void get_vars_by_grouping(VarList& _return, const Grouping grouping) {
    return;
  }
  void insert_counter32(const std::vector<Var> & vars, const std::vector<Counter32> & values) {
    return;
  }
  void insert_counter64(const std::vector<Var> & vars, const std::vector<Counter64> & values) {
    return;
  }
  void insert_gauge32(const std::vector<Var> & vars, const std::vector<Gauge32> & values) {
    return;
  }
}; 

class ESDB_list_devices_args {
 public:

  ESDB_list_devices_args() {
  } 

  virtual ~ESDB_list_devices_args() throw() {}


  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_list_devices_pargs {
 public:


  virtual ~ESDB_list_devices_pargs() throw() {}


  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_list_devices_result {
 public:

  ESDB_list_devices_result() {
  } 

  virtual ~ESDB_list_devices_result() throw() {}

  std::vector<std::string>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_list_devices_presult {
 public:


  virtual ~ESDB_list_devices_presult() throw() {}

  std::vector<std::string> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);

};

class ESDB_get_device_args {
 public:

  ESDB_get_device_args() : name("") {
  } 

  virtual ~ESDB_get_device_args() throw() {}

  std::string name;

  struct __isset {
    __isset() : name(false) {}
    bool name;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_get_device_pargs {
 public:


  virtual ~ESDB_get_device_pargs() throw() {}

  const std::string* name;

  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_get_device_result {
 public:

  ESDB_get_device_result() {
  } 

  virtual ~ESDB_get_device_result() throw() {}

  Device success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_get_device_presult {
 public:


  virtual ~ESDB_get_device_presult() throw() {}

  Device* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);

};

class ESDB_get_all_devices_args {
 public:

  ESDB_get_all_devices_args() {
  } 

  virtual ~ESDB_get_all_devices_args() throw() {}


  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_get_all_devices_pargs {
 public:


  virtual ~ESDB_get_all_devices_pargs() throw() {}


  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_get_all_devices_result {
 public:

  ESDB_get_all_devices_result() {
  } 

  virtual ~ESDB_get_all_devices_result() throw() {}

  std::map<std::string, Device>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_get_all_devices_presult {
 public:


  virtual ~ESDB_get_all_devices_presult() throw() {}

  std::map<std::string, Device> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);

};

class ESDB_add_device_args {
 public:

  ESDB_add_device_args() : name(""), begin_time(""), end_time("") {
  } 

  virtual ~ESDB_add_device_args() throw() {}

  std::string name;
  std::string begin_time;
  std::string end_time;

  struct __isset {
    __isset() : name(false), begin_time(false), end_time(false) {}
    bool name;
    bool begin_time;
    bool end_time;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_add_device_pargs {
 public:


  virtual ~ESDB_add_device_pargs() throw() {}

  const std::string* name;
  const std::string* begin_time;
  const std::string* end_time;

  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_add_device_result {
 public:

  ESDB_add_device_result() {
  } 

  virtual ~ESDB_add_device_result() throw() {}


  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_add_device_presult {
 public:


  virtual ~ESDB_add_device_presult() throw() {}


  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);

};

class ESDB_update_device_args {
 public:

  ESDB_update_device_args() : name(""), begin_time(""), end_time("") {
  } 

  virtual ~ESDB_update_device_args() throw() {}

  std::string name;
  std::string begin_time;
  std::string end_time;

  struct __isset {
    __isset() : name(false), begin_time(false), end_time(false) {}
    bool name;
    bool begin_time;
    bool end_time;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_update_device_pargs {
 public:


  virtual ~ESDB_update_device_pargs() throw() {}

  const std::string* name;
  const std::string* begin_time;
  const std::string* end_time;

  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_update_device_result {
 public:

  ESDB_update_device_result() {
  } 

  virtual ~ESDB_update_device_result() throw() {}


  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_update_device_presult {
 public:


  virtual ~ESDB_update_device_presult() throw() {}


  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);

};

class ESDB_list_device_oidsets_args {
 public:

  ESDB_list_device_oidsets_args() {
  } 

  virtual ~ESDB_list_device_oidsets_args() throw() {}

  Device device;

  struct __isset {
    __isset() : device(false) {}
    bool device;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_list_device_oidsets_pargs {
 public:


  virtual ~ESDB_list_device_oidsets_pargs() throw() {}

  const Device* device;

  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_list_device_oidsets_result {
 public:

  ESDB_list_device_oidsets_result() {
  } 

  virtual ~ESDB_list_device_oidsets_result() throw() {}

  std::vector<OIDSet>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_list_device_oidsets_presult {
 public:


  virtual ~ESDB_list_device_oidsets_presult() throw() {}

  std::vector<OIDSet> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);

};

class ESDB_list_oids_args {
 public:

  ESDB_list_oids_args() {
  } 

  virtual ~ESDB_list_oids_args() throw() {}


  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_list_oids_pargs {
 public:


  virtual ~ESDB_list_oids_pargs() throw() {}


  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_list_oids_result {
 public:

  ESDB_list_oids_result() {
  } 

  virtual ~ESDB_list_oids_result() throw() {}

  std::vector<std::string>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_list_oids_presult {
 public:


  virtual ~ESDB_list_oids_presult() throw() {}

  std::vector<std::string> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);

};

class ESDB_get_oid_args {
 public:

  ESDB_get_oid_args() : name("") {
  } 

  virtual ~ESDB_get_oid_args() throw() {}

  std::string name;

  struct __isset {
    __isset() : name(false) {}
    bool name;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_get_oid_pargs {
 public:


  virtual ~ESDB_get_oid_pargs() throw() {}

  const std::string* name;

  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_get_oid_result {
 public:

  ESDB_get_oid_result() {
  } 

  virtual ~ESDB_get_oid_result() throw() {}

  OID success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_get_oid_presult {
 public:


  virtual ~ESDB_get_oid_presult() throw() {}

  OID* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);

};

class ESDB_add_oid_args {
 public:

  ESDB_add_oid_args() : name(""), storage(""), oidtype("") {
  } 

  virtual ~ESDB_add_oid_args() throw() {}

  std::string name;
  std::string storage;
  std::string oidtype;

  struct __isset {
    __isset() : name(false), storage(false), oidtype(false) {}
    bool name;
    bool storage;
    bool oidtype;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_add_oid_pargs {
 public:


  virtual ~ESDB_add_oid_pargs() throw() {}

  const std::string* name;
  const std::string* storage;
  const std::string* oidtype;

  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_add_oid_result {
 public:

  ESDB_add_oid_result() {
  } 

  virtual ~ESDB_add_oid_result() throw() {}


  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_add_oid_presult {
 public:


  virtual ~ESDB_add_oid_presult() throw() {}


  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);

};

class ESDB_list_oidsets_args {
 public:

  ESDB_list_oidsets_args() {
  } 

  virtual ~ESDB_list_oidsets_args() throw() {}


  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_list_oidsets_pargs {
 public:


  virtual ~ESDB_list_oidsets_pargs() throw() {}


  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_list_oidsets_result {
 public:

  ESDB_list_oidsets_result() {
  } 

  virtual ~ESDB_list_oidsets_result() throw() {}

  std::vector<std::string>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_list_oidsets_presult {
 public:


  virtual ~ESDB_list_oidsets_presult() throw() {}

  std::vector<std::string> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);

};

class ESDB_get_oidset_args {
 public:

  ESDB_get_oidset_args() : name("") {
  } 

  virtual ~ESDB_get_oidset_args() throw() {}

  std::string name;

  struct __isset {
    __isset() : name(false) {}
    bool name;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_get_oidset_pargs {
 public:


  virtual ~ESDB_get_oidset_pargs() throw() {}

  const std::string* name;

  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_get_oidset_result {
 public:

  ESDB_get_oidset_result() {
  } 

  virtual ~ESDB_get_oidset_result() throw() {}

  OIDSet success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_get_oidset_presult {
 public:


  virtual ~ESDB_get_oidset_presult() throw() {}

  OIDSet* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);

};

class ESDB_get_oidset_devices_args {
 public:

  ESDB_get_oidset_devices_args() {
  } 

  virtual ~ESDB_get_oidset_devices_args() throw() {}

  OIDSet oidset;

  struct __isset {
    __isset() : oidset(false) {}
    bool oidset;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_get_oidset_devices_pargs {
 public:


  virtual ~ESDB_get_oidset_devices_pargs() throw() {}

  const OIDSet* oidset;

  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_get_oidset_devices_result {
 public:

  ESDB_get_oidset_devices_result() {
  } 

  virtual ~ESDB_get_oidset_devices_result() throw() {}

  std::vector<Device>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_get_oidset_devices_presult {
 public:


  virtual ~ESDB_get_oidset_devices_presult() throw() {}

  std::vector<Device> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);

};

class ESDB_get_vars_by_grouping_args {
 public:

  ESDB_get_vars_by_grouping_args() : grouping((Grouping)0) {
  } 

  virtual ~ESDB_get_vars_by_grouping_args() throw() {}

  Grouping grouping;

  struct __isset {
    __isset() : grouping(false) {}
    bool grouping;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_get_vars_by_grouping_pargs {
 public:


  virtual ~ESDB_get_vars_by_grouping_pargs() throw() {}

  const Grouping* grouping;

  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_get_vars_by_grouping_result {
 public:

  ESDB_get_vars_by_grouping_result() {
  } 

  virtual ~ESDB_get_vars_by_grouping_result() throw() {}

  VarList success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_get_vars_by_grouping_presult {
 public:


  virtual ~ESDB_get_vars_by_grouping_presult() throw() {}

  VarList* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);

};

class ESDB_insert_counter32_args {
 public:

  ESDB_insert_counter32_args() {
  } 

  virtual ~ESDB_insert_counter32_args() throw() {}

  std::vector<Var>  vars;
  std::vector<Counter32>  values;

  struct __isset {
    __isset() : vars(false), values(false) {}
    bool vars;
    bool values;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_insert_counter32_pargs {
 public:


  virtual ~ESDB_insert_counter32_pargs() throw() {}

  const std::vector<Var> * vars;
  const std::vector<Counter32> * values;

  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_insert_counter32_result {
 public:

  ESDB_insert_counter32_result() {
  } 

  virtual ~ESDB_insert_counter32_result() throw() {}


  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_insert_counter32_presult {
 public:


  virtual ~ESDB_insert_counter32_presult() throw() {}


  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);

};

class ESDB_insert_counter64_args {
 public:

  ESDB_insert_counter64_args() {
  } 

  virtual ~ESDB_insert_counter64_args() throw() {}

  std::vector<Var>  vars;
  std::vector<Counter64>  values;

  struct __isset {
    __isset() : vars(false), values(false) {}
    bool vars;
    bool values;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_insert_counter64_pargs {
 public:


  virtual ~ESDB_insert_counter64_pargs() throw() {}

  const std::vector<Var> * vars;
  const std::vector<Counter64> * values;

  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_insert_counter64_result {
 public:

  ESDB_insert_counter64_result() {
  } 

  virtual ~ESDB_insert_counter64_result() throw() {}


  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_insert_counter64_presult {
 public:


  virtual ~ESDB_insert_counter64_presult() throw() {}


  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);

};

class ESDB_insert_gauge32_args {
 public:

  ESDB_insert_gauge32_args() {
  } 

  virtual ~ESDB_insert_gauge32_args() throw() {}

  std::vector<Var>  vars;
  std::vector<Gauge32>  values;

  struct __isset {
    __isset() : vars(false), values(false) {}
    bool vars;
    bool values;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_insert_gauge32_pargs {
 public:


  virtual ~ESDB_insert_gauge32_pargs() throw() {}

  const std::vector<Var> * vars;
  const std::vector<Gauge32> * values;

  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_insert_gauge32_result {
 public:

  ESDB_insert_gauge32_result() {
  } 

  virtual ~ESDB_insert_gauge32_result() throw() {}


  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class ESDB_insert_gauge32_presult {
 public:


  virtual ~ESDB_insert_gauge32_presult() throw() {}


  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);

};

class ESDBClient : virtual public ESDBIf {
 public:
  ESDBClient(boost::shared_ptr<facebook::thrift::protocol::TProtocol> prot) : 
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ESDBClient(boost::shared_ptr<facebook::thrift::protocol::TProtocol> iprot, boost::shared_ptr<facebook::thrift::protocol::TProtocol> oprot) : 
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  void list_devices(std::vector<std::string> & _return);
  void send_list_devices();
  void recv_list_devices(std::vector<std::string> & _return);
  void get_device(Device& _return, const std::string& name);
  void send_get_device(const std::string& name);
  void recv_get_device(Device& _return);
  void get_all_devices(std::map<std::string, Device> & _return);
  void send_get_all_devices();
  void recv_get_all_devices(std::map<std::string, Device> & _return);
  void add_device(const std::string& name, const std::string& begin_time, const std::string& end_time);
  void send_add_device(const std::string& name, const std::string& begin_time, const std::string& end_time);
  void recv_add_device();
  void update_device(const std::string& name, const std::string& begin_time, const std::string& end_time);
  void send_update_device(const std::string& name, const std::string& begin_time, const std::string& end_time);
  void recv_update_device();
  void list_device_oidsets(std::vector<OIDSet> & _return, const Device& device);
  void send_list_device_oidsets(const Device& device);
  void recv_list_device_oidsets(std::vector<OIDSet> & _return);
  void list_oids(std::vector<std::string> & _return);
  void send_list_oids();
  void recv_list_oids(std::vector<std::string> & _return);
  void get_oid(OID& _return, const std::string& name);
  void send_get_oid(const std::string& name);
  void recv_get_oid(OID& _return);
  void add_oid(const std::string& name, const std::string& storage, const std::string& oidtype);
  void send_add_oid(const std::string& name, const std::string& storage, const std::string& oidtype);
  void recv_add_oid();
  void list_oidsets(std::vector<std::string> & _return);
  void send_list_oidsets();
  void recv_list_oidsets(std::vector<std::string> & _return);
  void get_oidset(OIDSet& _return, const std::string& name);
  void send_get_oidset(const std::string& name);
  void recv_get_oidset(OIDSet& _return);
  void get_oidset_devices(std::vector<Device> & _return, const OIDSet& oidset);
  void send_get_oidset_devices(const OIDSet& oidset);
  void recv_get_oidset_devices(std::vector<Device> & _return);
  void get_vars_by_grouping(VarList& _return, const Grouping grouping);
  void send_get_vars_by_grouping(const Grouping grouping);
  void recv_get_vars_by_grouping(VarList& _return);
  void insert_counter32(const std::vector<Var> & vars, const std::vector<Counter32> & values);
  void send_insert_counter32(const std::vector<Var> & vars, const std::vector<Counter32> & values);
  void recv_insert_counter32();
  void insert_counter64(const std::vector<Var> & vars, const std::vector<Counter64> & values);
  void send_insert_counter64(const std::vector<Var> & vars, const std::vector<Counter64> & values);
  void recv_insert_counter64();
  void insert_gauge32(const std::vector<Var> & vars, const std::vector<Gauge32> & values);
  void send_insert_gauge32(const std::vector<Var> & vars, const std::vector<Gauge32> & values);
  void recv_insert_gauge32();
 protected:
  boost::shared_ptr<facebook::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr<facebook::thrift::protocol::TProtocol> poprot_;
  facebook::thrift::protocol::TProtocol* iprot_;
  facebook::thrift::protocol::TProtocol* oprot_;
};

class ESDBProcessor : virtual public facebook::thrift::TProcessor {
 protected:
  boost::shared_ptr<ESDBIf> iface_;
  virtual bool process_fn(facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (ESDBProcessor::*)(int32_t, facebook::thrift::protocol::TProtocol*, facebook::thrift::protocol::TProtocol*)> processMap_;
  void process_list_devices(int32_t seqid, facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot);
  void process_get_device(int32_t seqid, facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot);
  void process_get_all_devices(int32_t seqid, facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot);
  void process_add_device(int32_t seqid, facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot);
  void process_update_device(int32_t seqid, facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot);
  void process_list_device_oidsets(int32_t seqid, facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot);
  void process_list_oids(int32_t seqid, facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot);
  void process_get_oid(int32_t seqid, facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot);
  void process_add_oid(int32_t seqid, facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot);
  void process_list_oidsets(int32_t seqid, facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot);
  void process_get_oidset(int32_t seqid, facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot);
  void process_get_oidset_devices(int32_t seqid, facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot);
  void process_get_vars_by_grouping(int32_t seqid, facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot);
  void process_insert_counter32(int32_t seqid, facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot);
  void process_insert_counter64(int32_t seqid, facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot);
  void process_insert_gauge32(int32_t seqid, facebook::thrift::protocol::TProtocol* iprot, facebook::thrift::protocol::TProtocol* oprot);
 public: 
  ESDBProcessor(boost::shared_ptr<ESDBIf> iface) :
    iface_(iface) {
    processMap_["list_devices"] = &ESDBProcessor::process_list_devices;
    processMap_["get_device"] = &ESDBProcessor::process_get_device;
    processMap_["get_all_devices"] = &ESDBProcessor::process_get_all_devices;
    processMap_["add_device"] = &ESDBProcessor::process_add_device;
    processMap_["update_device"] = &ESDBProcessor::process_update_device;
    processMap_["list_device_oidsets"] = &ESDBProcessor::process_list_device_oidsets;
    processMap_["list_oids"] = &ESDBProcessor::process_list_oids;
    processMap_["get_oid"] = &ESDBProcessor::process_get_oid;
    processMap_["add_oid"] = &ESDBProcessor::process_add_oid;
    processMap_["list_oidsets"] = &ESDBProcessor::process_list_oidsets;
    processMap_["get_oidset"] = &ESDBProcessor::process_get_oidset;
    processMap_["get_oidset_devices"] = &ESDBProcessor::process_get_oidset_devices;
    processMap_["get_vars_by_grouping"] = &ESDBProcessor::process_get_vars_by_grouping;
    processMap_["insert_counter32"] = &ESDBProcessor::process_insert_counter32;
    processMap_["insert_counter64"] = &ESDBProcessor::process_insert_counter64;
    processMap_["insert_gauge32"] = &ESDBProcessor::process_insert_gauge32;
  }

  virtual bool process(boost::shared_ptr<facebook::thrift::protocol::TProtocol> piprot, boost::shared_ptr<facebook::thrift::protocol::TProtocol> poprot);
  virtual ~ESDBProcessor() {}
};

class ESDBMultiface : virtual public ESDBIf {
 public: 
  ESDBMultiface(std::vector<boost::shared_ptr<ESDBIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ESDBMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ESDBIf> > ifaces_;
  ESDBMultiface() {}
  void add(boost::shared_ptr<ESDBIf> iface) { 
    ifaces_.push_back(iface);
  }
 public:
  void list_devices(std::vector<std::string> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->list_devices(_return);
        return;
      } else {
        ifaces_[i]->list_devices(_return);
      }
    }
  }

  void get_device(Device& _return, const std::string& name) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_device(_return, name);
        return;
      } else {
        ifaces_[i]->get_device(_return, name);
      }
    }
  }

  void get_all_devices(std::map<std::string, Device> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_all_devices(_return);
        return;
      } else {
        ifaces_[i]->get_all_devices(_return);
      }
    }
  }

  void add_device(const std::string& name, const std::string& begin_time, const std::string& end_time) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->add_device(name, begin_time, end_time);
    }
  }

  void update_device(const std::string& name, const std::string& begin_time, const std::string& end_time) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->update_device(name, begin_time, end_time);
    }
  }

  void list_device_oidsets(std::vector<OIDSet> & _return, const Device& device) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->list_device_oidsets(_return, device);
        return;
      } else {
        ifaces_[i]->list_device_oidsets(_return, device);
      }
    }
  }

  void list_oids(std::vector<std::string> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->list_oids(_return);
        return;
      } else {
        ifaces_[i]->list_oids(_return);
      }
    }
  }

  void get_oid(OID& _return, const std::string& name) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_oid(_return, name);
        return;
      } else {
        ifaces_[i]->get_oid(_return, name);
      }
    }
  }

  void add_oid(const std::string& name, const std::string& storage, const std::string& oidtype) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->add_oid(name, storage, oidtype);
    }
  }

  void list_oidsets(std::vector<std::string> & _return) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->list_oidsets(_return);
        return;
      } else {
        ifaces_[i]->list_oidsets(_return);
      }
    }
  }

  void get_oidset(OIDSet& _return, const std::string& name) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_oidset(_return, name);
        return;
      } else {
        ifaces_[i]->get_oidset(_return, name);
      }
    }
  }

  void get_oidset_devices(std::vector<Device> & _return, const OIDSet& oidset) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_oidset_devices(_return, oidset);
        return;
      } else {
        ifaces_[i]->get_oidset_devices(_return, oidset);
      }
    }
  }

  void get_vars_by_grouping(VarList& _return, const Grouping grouping) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_vars_by_grouping(_return, grouping);
        return;
      } else {
        ifaces_[i]->get_vars_by_grouping(_return, grouping);
      }
    }
  }

  void insert_counter32(const std::vector<Var> & vars, const std::vector<Counter32> & values) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->insert_counter32(vars, values);
    }
  }

  void insert_counter64(const std::vector<Var> & vars, const std::vector<Counter64> & values) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->insert_counter64(vars, values);
    }
  }

  void insert_gauge32(const std::vector<Var> & vars, const std::vector<Gauge32> & values) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->insert_gauge32(vars, values);
    }
  }

};

} // namespace

#endif
