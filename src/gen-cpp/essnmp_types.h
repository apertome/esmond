/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef essnmp_TYPES_H
#define essnmp_TYPES_H

#include <Thrift.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace ESSNMP { 

enum Grouping {
  Commercial = 1,
  Internal = 2,
  ResearchEducation = 3,
  Education = 4,
  Site = 5
};

class OIDType {
 public:

  OIDType() : id(0), name("") {
  } 

  virtual ~OIDType() throw() {}

  int32_t id;
  std::string name;

  struct __isset {
    __isset() : id(false), name(false) {}
    bool id;
    bool name;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class OIDCorrelator {
 public:

  OIDCorrelator() : id(0), name("") {
  } 

  virtual ~OIDCorrelator() throw() {}

  int32_t id;
  std::string name;

  struct __isset {
    __isset() : id(false), name(false) {}
    bool id;
    bool name;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class OID {
 public:

  OID() : id(0), name(""), oidtypeid(0), oidcorrelatorid(0) {
  } 

  virtual ~OID() throw() {}

  int32_t id;
  std::string name;
  int32_t oidtypeid;
  int32_t oidcorrelatorid;

  struct __isset {
    __isset() : id(false), name(false), oidtypeid(false), oidcorrelatorid(false) {}
    bool id;
    bool name;
    bool oidtypeid;
    bool oidcorrelatorid;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class Poller {
 public:

  Poller() : id(0), name("") {
  } 

  virtual ~Poller() throw() {}

  int32_t id;
  std::string name;

  struct __isset {
    __isset() : id(false), name(false) {}
    bool id;
    bool name;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class OIDSet {
 public:

  OIDSet() : id(0), name(""), frequency(0), pollerid(0) {
  } 

  virtual ~OIDSet() throw() {}

  int32_t id;
  std::string name;
  int32_t frequency;
  std::vector<OID>  oids;
  int32_t pollerid;

  struct __isset {
    __isset() : id(false), name(false), frequency(false), oids(false), pollerid(false) {}
    bool id;
    bool name;
    bool frequency;
    bool oids;
    bool pollerid;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class DeviceTag {
 public:

  DeviceTag() : id(0), name("") {
  } 

  virtual ~DeviceTag() throw() {}

  int32_t id;
  std::string name;

  struct __isset {
    __isset() : id(false), name(false) {}
    bool id;
    bool name;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class Device {
 public:

  Device() : id(0), name(""), begin_time(0), end_time(0), community("") {
  } 

  virtual ~Device() throw() {}

  int32_t id;
  std::string name;
  int32_t begin_time;
  int32_t end_time;
  std::string community;
  std::vector<OIDSet>  oidsets;
  std::vector<DeviceTag>  tags;

  struct __isset {
    __isset() : id(false), name(false), begin_time(false), end_time(false), community(false), oidsets(false), tags(false) {}
    bool id;
    bool name;
    bool begin_time;
    bool end_time;
    bool community;
    bool oidsets;
    bool tags;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class Counter32 {
 public:

  Counter32() : flags(0), timestamp(0), value(0), version(1), type_id(1) {
  } 

  virtual ~Counter32() throw() {}

  int32_t flags;
  int32_t timestamp;
  int32_t value;
  int8_t version;
  int8_t type_id;

  struct __isset {
    __isset() : flags(false), timestamp(false), value(false), version(false), type_id(false) {}
    bool flags;
    bool timestamp;
    bool value;
    bool version;
    bool type_id;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class Counter64 {
 public:

  Counter64() : flags(0), timestamp(0), value(0), version(1), type_id(2) {
  } 

  virtual ~Counter64() throw() {}

  int32_t flags;
  int32_t timestamp;
  int64_t value;
  int8_t version;
  int8_t type_id;

  struct __isset {
    __isset() : flags(false), timestamp(false), value(false), version(false), type_id(false) {}
    bool flags;
    bool timestamp;
    bool value;
    bool version;
    bool type_id;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class Gauge32 {
 public:

  Gauge32() : flags(0), timestamp(0), value(0), version(1), type_id(3) {
  } 

  virtual ~Gauge32() throw() {}

  int32_t flags;
  int32_t timestamp;
  int32_t value;
  int8_t version;
  int8_t type_id;

  struct __isset {
    __isset() : flags(false), timestamp(false), value(false), version(false), type_id(false) {}
    bool flags;
    bool timestamp;
    bool value;
    bool version;
    bool type_id;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class VarList {
 public:

  VarList() {
  } 

  virtual ~VarList() throw() {}

  std::vector<Counter32>  counter32;
  std::vector<Counter64>  counter64;
  std::vector<Gauge32>  gauge32;

  struct __isset {
    __isset() : counter32(false), counter64(false), gauge32(false) {}
    bool counter32;
    bool counter64;
    bool gauge32;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class SNMPPollResultPair {
 public:

  SNMPPollResultPair() : OIDName(""), value("") {
  } 

  virtual ~SNMPPollResultPair() throw() {}

  std::string OIDName;
  std::string value;

  struct __isset {
    __isset() : OIDName(false), value(false) {}
    bool OIDName;
    bool value;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class SNMPPollResult {
 public:

  SNMPPollResult() : device_id(0), oidset_id(0), timestamp(0) {
  } 

  virtual ~SNMPPollResult() throw() {}

  int32_t device_id;
  int32_t oidset_id;
  int32_t timestamp;
  std::vector<std::vector<std::string> >  vars;

  struct __isset {
    __isset() : device_id(false), oidset_id(false), timestamp(false), vars(false) {}
    bool device_id;
    bool oidset_id;
    bool timestamp;
    bool vars;
  } __isset;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
