#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

package ESxSNMP::Grouping;
use constant Commercial => 1;
use constant Internal => 2;
use constant ResearchEducation => 3;
use constant Education => 4;
use constant Site => 5;
package ESxSNMP::OIDType;
use Class::Accessor;
use base('Class::Accessor');
ESxSNMP::OIDType->mk_accessors( qw( id name ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{id} = undef;
$self->{name} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'OIDType';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('OIDType');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', TType::I32, 1);
    $xfer += $output->writeI32($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ESxSNMP::OIDCorrelator;
use Class::Accessor;
use base('Class::Accessor');
ESxSNMP::OIDCorrelator->mk_accessors( qw( id name ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{id} = undef;
$self->{name} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'OIDCorrelator';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('OIDCorrelator');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', TType::I32, 1);
    $xfer += $output->writeI32($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ESxSNMP::OID;
use Class::Accessor;
use base('Class::Accessor');
ESxSNMP::OID->mk_accessors( qw( id name oidtypeid ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{id} = undef;
$self->{name} = undef;
$self->{oidtypeid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
    if (defined $vals->{oidtypeid}) {
      $self->{oidtypeid} = $vals->{oidtypeid};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'OID';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{oidtypeid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('OID');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', TType::I32, 1);
    $xfer += $output->writeI32($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{oidtypeid}) {
    $xfer += $output->writeFieldBegin('oidtypeid', TType::I32, 4);
    $xfer += $output->writeI32($self->{oidtypeid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ESxSNMP::Poller;
use Class::Accessor;
use base('Class::Accessor');
ESxSNMP::Poller->mk_accessors( qw( id name ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{id} = undef;
$self->{name} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Poller';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Poller');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', TType::I32, 1);
    $xfer += $output->writeI32($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ESxSNMP::OIDSet;
use Class::Accessor;
use base('Class::Accessor');
ESxSNMP::OIDSet->mk_accessors( qw( id name frequency oids pollerid ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{id} = undef;
$self->{name} = undef;
$self->{frequency} = undef;
$self->{oids} = undef;
$self->{pollerid} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
    if (defined $vals->{frequency}) {
      $self->{frequency} = $vals->{frequency};
    }
    if (defined $vals->{oids}) {
      $self->{oids} = $vals->{oids};
    }
    if (defined $vals->{pollerid}) {
      $self->{pollerid} = $vals->{pollerid};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'OIDSet';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{frequency});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size0 = 0;
          $self->{oids} = [];
          my $_etype3 = 0;
          $xfer += $input->readListBegin(\$_etype3, \$_size0);
          for (my $_i4 = 0; $_i4 < $_size0; ++$_i4)
          {
            my $elem5 = undef;
            $elem5 = new ESxSNMP::OID();
            $xfer += $elem5->read($input);
            push(@{$self->{oids}},$elem5);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{pollerid});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('OIDSet');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', TType::I32, 1);
    $xfer += $output->writeI32($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{frequency}) {
    $xfer += $output->writeFieldBegin('frequency', TType::I32, 3);
    $xfer += $output->writeI32($self->{frequency});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{oids}) {
    $xfer += $output->writeFieldBegin('oids', TType::LIST, 4);
    {
      $output->writeListBegin(TType::STRUCT, scalar(@{$self->{oids}}));
      {
        foreach my $iter6 (@{$self->{oids}}) 
        {
          $xfer += ${iter6}->write($output);
        }
      }
      $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{pollerid}) {
    $xfer += $output->writeFieldBegin('pollerid', TType::I32, 5);
    $xfer += $output->writeI32($self->{pollerid});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ESxSNMP::DeviceTag;
use Class::Accessor;
use base('Class::Accessor');
ESxSNMP::DeviceTag->mk_accessors( qw( id name ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{id} = undef;
$self->{name} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'DeviceTag';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('DeviceTag');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', TType::I32, 1);
    $xfer += $output->writeI32($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ESxSNMP::Device;
use Class::Accessor;
use base('Class::Accessor');
ESxSNMP::Device->mk_accessors( qw( id name begin_time end_time community oidsets ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{id} = undef;
$self->{name} = undef;
$self->{begin_time} = undef;
$self->{end_time} = undef;
$self->{community} = undef;
$self->{oidsets} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{name}) {
      $self->{name} = $vals->{name};
    }
    if (defined $vals->{begin_time}) {
      $self->{begin_time} = $vals->{begin_time};
    }
    if (defined $vals->{end_time}) {
      $self->{end_time} = $vals->{end_time};
    }
    if (defined $vals->{community}) {
      $self->{community} = $vals->{community};
    }
    if (defined $vals->{oidsets}) {
      $self->{oidsets} = $vals->{oidsets};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Device';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{name});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I64) {
        $xfer += $input->readI64(\$self->{begin_time});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::I64) {
        $xfer += $input->readI64(\$self->{end_time});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{community});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size7 = 0;
          $self->{oidsets} = [];
          my $_etype10 = 0;
          $xfer += $input->readListBegin(\$_etype10, \$_size7);
          for (my $_i11 = 0; $_i11 < $_size7; ++$_i11)
          {
            my $elem12 = undef;
            $elem12 = new ESxSNMP::OIDSet();
            $xfer += $elem12->read($input);
            push(@{$self->{oidsets}},$elem12);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Device');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', TType::I32, 1);
    $xfer += $output->writeI32($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{name}) {
    $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
    $xfer += $output->writeString($self->{name});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{begin_time}) {
    $xfer += $output->writeFieldBegin('begin_time', TType::I64, 3);
    $xfer += $output->writeI64($self->{begin_time});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{end_time}) {
    $xfer += $output->writeFieldBegin('end_time', TType::I64, 4);
    $xfer += $output->writeI64($self->{end_time});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{community}) {
    $xfer += $output->writeFieldBegin('community', TType::STRING, 5);
    $xfer += $output->writeString($self->{community});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{oidsets}) {
    $xfer += $output->writeFieldBegin('oidsets', TType::LIST, 6);
    {
      $output->writeListBegin(TType::STRUCT, scalar(@{$self->{oidsets}}));
      {
        foreach my $iter13 (@{$self->{oidsets}}) 
        {
          $xfer += ${iter13}->write($output);
        }
      }
      $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ESxSNMP::IfRef;
use Class::Accessor;
use base('Class::Accessor');
ESxSNMP::IfRef->mk_accessors( qw( id device ifindex ifdescr ifalias ipaddr ifspeed ifhighspeed connection conntype usage visibility grouping ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{id} = undef;
$self->{device} = undef;
$self->{ifindex} = undef;
$self->{ifdescr} = undef;
$self->{ifalias} = undef;
$self->{ipaddr} = undef;
$self->{ifspeed} = undef;
$self->{ifhighspeed} = undef;
$self->{connection} = undef;
$self->{conntype} = undef;
$self->{usage} = undef;
$self->{visibility} = undef;
$self->{grouping} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{id}) {
      $self->{id} = $vals->{id};
    }
    if (defined $vals->{device}) {
      $self->{device} = $vals->{device};
    }
    if (defined $vals->{ifindex}) {
      $self->{ifindex} = $vals->{ifindex};
    }
    if (defined $vals->{ifdescr}) {
      $self->{ifdescr} = $vals->{ifdescr};
    }
    if (defined $vals->{ifalias}) {
      $self->{ifalias} = $vals->{ifalias};
    }
    if (defined $vals->{ipaddr}) {
      $self->{ipaddr} = $vals->{ipaddr};
    }
    if (defined $vals->{ifspeed}) {
      $self->{ifspeed} = $vals->{ifspeed};
    }
    if (defined $vals->{ifhighspeed}) {
      $self->{ifhighspeed} = $vals->{ifhighspeed};
    }
    if (defined $vals->{connection}) {
      $self->{connection} = $vals->{connection};
    }
    if (defined $vals->{conntype}) {
      $self->{conntype} = $vals->{conntype};
    }
    if (defined $vals->{usage}) {
      $self->{usage} = $vals->{usage};
    }
    if (defined $vals->{visibility}) {
      $self->{visibility} = $vals->{visibility};
    }
    if (defined $vals->{grouping}) {
      $self->{grouping} = $vals->{grouping};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'IfRef';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{device} = new ESxSNMP::Device();
        $xfer += $self->{device}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{ifindex});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ifdescr});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ifalias});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{ipaddr});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == TType::I64) {
        $xfer += $input->readI64(\$self->{ifspeed});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == TType::I64) {
        $xfer += $input->readI64(\$self->{ifhighspeed});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^9$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{connection});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^10$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{conntype});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^11$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{usage});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^12$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{visibility});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^13$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{grouping});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('IfRef');
  if (defined $self->{id}) {
    $xfer += $output->writeFieldBegin('id', TType::I32, 1);
    $xfer += $output->writeI32($self->{id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{device}) {
    $xfer += $output->writeFieldBegin('device', TType::STRUCT, 2);
    $xfer += $self->{device}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ifindex}) {
    $xfer += $output->writeFieldBegin('ifindex', TType::I32, 3);
    $xfer += $output->writeI32($self->{ifindex});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ifdescr}) {
    $xfer += $output->writeFieldBegin('ifdescr', TType::STRING, 4);
    $xfer += $output->writeString($self->{ifdescr});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ifalias}) {
    $xfer += $output->writeFieldBegin('ifalias', TType::STRING, 5);
    $xfer += $output->writeString($self->{ifalias});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ipaddr}) {
    $xfer += $output->writeFieldBegin('ipaddr', TType::STRING, 6);
    $xfer += $output->writeString($self->{ipaddr});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ifspeed}) {
    $xfer += $output->writeFieldBegin('ifspeed', TType::I64, 7);
    $xfer += $output->writeI64($self->{ifspeed});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{ifhighspeed}) {
    $xfer += $output->writeFieldBegin('ifhighspeed', TType::I64, 8);
    $xfer += $output->writeI64($self->{ifhighspeed});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{connection}) {
    $xfer += $output->writeFieldBegin('connection', TType::STRING, 9);
    $xfer += $output->writeString($self->{connection});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{conntype}) {
    $xfer += $output->writeFieldBegin('conntype', TType::STRING, 10);
    $xfer += $output->writeString($self->{conntype});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{usage}) {
    $xfer += $output->writeFieldBegin('usage', TType::STRING, 11);
    $xfer += $output->writeString($self->{usage});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{visibility}) {
    $xfer += $output->writeFieldBegin('visibility', TType::STRING, 12);
    $xfer += $output->writeString($self->{visibility});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{grouping}) {
    $xfer += $output->writeFieldBegin('grouping', TType::STRING, 13);
    $xfer += $output->writeString($self->{grouping});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ESxSNMP::Counter32;
use Class::Accessor;
use base('Class::Accessor');
ESxSNMP::Counter32->mk_accessors( qw( flags timestamp value version type_id ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{flags} = undef;
$self->{timestamp} = undef;
$self->{value} = undef;
$self->{version} = 1;
$self->{type_id} = 1;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{flags}) {
      $self->{flags} = $vals->{flags};
    }
    if (defined $vals->{timestamp}) {
      $self->{timestamp} = $vals->{timestamp};
    }
    if (defined $vals->{value}) {
      $self->{value} = $vals->{value};
    }
    if (defined $vals->{version}) {
      $self->{version} = $vals->{version};
    }
    if (defined $vals->{type_id}) {
      $self->{type_id} = $vals->{type_id};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Counter32';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{flags});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{timestamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{value});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{version});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{type_id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Counter32');
  if (defined $self->{flags}) {
    $xfer += $output->writeFieldBegin('flags', TType::I32, 1);
    $xfer += $output->writeI32($self->{flags});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{timestamp}) {
    $xfer += $output->writeFieldBegin('timestamp', TType::I32, 2);
    $xfer += $output->writeI32($self->{timestamp});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{value}) {
    $xfer += $output->writeFieldBegin('value', TType::I32, 3);
    $xfer += $output->writeI32($self->{value});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{version}) {
    $xfer += $output->writeFieldBegin('version', TType::BYTE, 4);
    $xfer += $output->writeByte($self->{version});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_id}) {
    $xfer += $output->writeFieldBegin('type_id', TType::BYTE, 5);
    $xfer += $output->writeByte($self->{type_id});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ESxSNMP::Counter64;
use Class::Accessor;
use base('Class::Accessor');
ESxSNMP::Counter64->mk_accessors( qw( flags timestamp value version type_id ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{flags} = undef;
$self->{timestamp} = undef;
$self->{value} = undef;
$self->{version} = 1;
$self->{type_id} = 2;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{flags}) {
      $self->{flags} = $vals->{flags};
    }
    if (defined $vals->{timestamp}) {
      $self->{timestamp} = $vals->{timestamp};
    }
    if (defined $vals->{value}) {
      $self->{value} = $vals->{value};
    }
    if (defined $vals->{version}) {
      $self->{version} = $vals->{version};
    }
    if (defined $vals->{type_id}) {
      $self->{type_id} = $vals->{type_id};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Counter64';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{flags});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{timestamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I64) {
        $xfer += $input->readI64(\$self->{value});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{version});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{type_id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Counter64');
  if (defined $self->{flags}) {
    $xfer += $output->writeFieldBegin('flags', TType::I32, 1);
    $xfer += $output->writeI32($self->{flags});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{timestamp}) {
    $xfer += $output->writeFieldBegin('timestamp', TType::I32, 2);
    $xfer += $output->writeI32($self->{timestamp});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{value}) {
    $xfer += $output->writeFieldBegin('value', TType::I64, 3);
    $xfer += $output->writeI64($self->{value});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{version}) {
    $xfer += $output->writeFieldBegin('version', TType::BYTE, 4);
    $xfer += $output->writeByte($self->{version});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_id}) {
    $xfer += $output->writeFieldBegin('type_id', TType::BYTE, 5);
    $xfer += $output->writeByte($self->{type_id});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ESxSNMP::Gauge32;
use Class::Accessor;
use base('Class::Accessor');
ESxSNMP::Gauge32->mk_accessors( qw( flags timestamp value version type_id ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{flags} = undef;
$self->{timestamp} = undef;
$self->{value} = undef;
$self->{version} = 1;
$self->{type_id} = 3;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{flags}) {
      $self->{flags} = $vals->{flags};
    }
    if (defined $vals->{timestamp}) {
      $self->{timestamp} = $vals->{timestamp};
    }
    if (defined $vals->{value}) {
      $self->{value} = $vals->{value};
    }
    if (defined $vals->{version}) {
      $self->{version} = $vals->{version};
    }
    if (defined $vals->{type_id}) {
      $self->{type_id} = $vals->{type_id};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Gauge32';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{flags});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{timestamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{value});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{version});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{type_id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Gauge32');
  if (defined $self->{flags}) {
    $xfer += $output->writeFieldBegin('flags', TType::I32, 1);
    $xfer += $output->writeI32($self->{flags});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{timestamp}) {
    $xfer += $output->writeFieldBegin('timestamp', TType::I32, 2);
    $xfer += $output->writeI32($self->{timestamp});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{value}) {
    $xfer += $output->writeFieldBegin('value', TType::I32, 3);
    $xfer += $output->writeI32($self->{value});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{version}) {
    $xfer += $output->writeFieldBegin('version', TType::BYTE, 4);
    $xfer += $output->writeByte($self->{version});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_id}) {
    $xfer += $output->writeFieldBegin('type_id', TType::BYTE, 5);
    $xfer += $output->writeByte($self->{type_id});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ESxSNMP::Aggregate;
use Class::Accessor;
use base('Class::Accessor');
ESxSNMP::Aggregate->mk_accessors( qw( flags timestamp average delta min max version type_id ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{flags} = undef;
$self->{timestamp} = undef;
$self->{average} = undef;
$self->{delta} = undef;
$self->{min} = undef;
$self->{max} = undef;
$self->{version} = 1;
$self->{type_id} = 5;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{flags}) {
      $self->{flags} = $vals->{flags};
    }
    if (defined $vals->{timestamp}) {
      $self->{timestamp} = $vals->{timestamp};
    }
    if (defined $vals->{average}) {
      $self->{average} = $vals->{average};
    }
    if (defined $vals->{delta}) {
      $self->{delta} = $vals->{delta};
    }
    if (defined $vals->{min}) {
      $self->{min} = $vals->{min};
    }
    if (defined $vals->{max}) {
      $self->{max} = $vals->{max};
    }
    if (defined $vals->{version}) {
      $self->{version} = $vals->{version};
    }
    if (defined $vals->{type_id}) {
      $self->{type_id} = $vals->{type_id};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Aggregate';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{flags});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{timestamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::DOUBLE) {
        $xfer += $input->readDouble(\$self->{average});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::DOUBLE) {
        $xfer += $input->readDouble(\$self->{delta});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^5$/ && do{      if ($ftype == TType::DOUBLE) {
        $xfer += $input->readDouble(\$self->{min});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^6$/ && do{      if ($ftype == TType::DOUBLE) {
        $xfer += $input->readDouble(\$self->{max});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^7$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{version});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^8$/ && do{      if ($ftype == TType::BYTE) {
        $xfer += $input->readByte(\$self->{type_id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Aggregate');
  if (defined $self->{flags}) {
    $xfer += $output->writeFieldBegin('flags', TType::I32, 1);
    $xfer += $output->writeI32($self->{flags});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{timestamp}) {
    $xfer += $output->writeFieldBegin('timestamp', TType::I32, 2);
    $xfer += $output->writeI32($self->{timestamp});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{average}) {
    $xfer += $output->writeFieldBegin('average', TType::DOUBLE, 3);
    $xfer += $output->writeDouble($self->{average});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{delta}) {
    $xfer += $output->writeFieldBegin('delta', TType::DOUBLE, 4);
    $xfer += $output->writeDouble($self->{delta});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{min}) {
    $xfer += $output->writeFieldBegin('min', TType::DOUBLE, 5);
    $xfer += $output->writeDouble($self->{min});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{max}) {
    $xfer += $output->writeFieldBegin('max', TType::DOUBLE, 6);
    $xfer += $output->writeDouble($self->{max});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{version}) {
    $xfer += $output->writeFieldBegin('version', TType::BYTE, 7);
    $xfer += $output->writeByte($self->{version});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{type_id}) {
    $xfer += $output->writeFieldBegin('type_id', TType::BYTE, 8);
    $xfer += $output->writeByte($self->{type_id});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ESxSNMP::VarList;
use Class::Accessor;
use base('Class::Accessor');
ESxSNMP::VarList->mk_accessors( qw( counter32 counter64 gauge32 aggregate ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{counter32} = undef;
$self->{counter64} = undef;
$self->{gauge32} = undef;
$self->{aggregate} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{counter32}) {
      $self->{counter32} = $vals->{counter32};
    }
    if (defined $vals->{counter64}) {
      $self->{counter64} = $vals->{counter64};
    }
    if (defined $vals->{gauge32}) {
      $self->{gauge32} = $vals->{gauge32};
    }
    if (defined $vals->{aggregate}) {
      $self->{aggregate} = $vals->{aggregate};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'VarList';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size14 = 0;
          $self->{counter32} = [];
          my $_etype17 = 0;
          $xfer += $input->readListBegin(\$_etype17, \$_size14);
          for (my $_i18 = 0; $_i18 < $_size14; ++$_i18)
          {
            my $elem19 = undef;
            $elem19 = new ESxSNMP::Counter32();
            $xfer += $elem19->read($input);
            push(@{$self->{counter32}},$elem19);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size20 = 0;
          $self->{counter64} = [];
          my $_etype23 = 0;
          $xfer += $input->readListBegin(\$_etype23, \$_size20);
          for (my $_i24 = 0; $_i24 < $_size20; ++$_i24)
          {
            my $elem25 = undef;
            $elem25 = new ESxSNMP::Counter64();
            $xfer += $elem25->read($input);
            push(@{$self->{counter64}},$elem25);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size26 = 0;
          $self->{gauge32} = [];
          my $_etype29 = 0;
          $xfer += $input->readListBegin(\$_etype29, \$_size26);
          for (my $_i30 = 0; $_i30 < $_size26; ++$_i30)
          {
            my $elem31 = undef;
            $elem31 = new ESxSNMP::Gauge32();
            $xfer += $elem31->read($input);
            push(@{$self->{gauge32}},$elem31);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size32 = 0;
          $self->{aggregate} = [];
          my $_etype35 = 0;
          $xfer += $input->readListBegin(\$_etype35, \$_size32);
          for (my $_i36 = 0; $_i36 < $_size32; ++$_i36)
          {
            my $elem37 = undef;
            $elem37 = new ESxSNMP::Aggregate();
            $xfer += $elem37->read($input);
            push(@{$self->{aggregate}},$elem37);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('VarList');
  if (defined $self->{counter32}) {
    $xfer += $output->writeFieldBegin('counter32', TType::LIST, 1);
    {
      $output->writeListBegin(TType::STRUCT, scalar(@{$self->{counter32}}));
      {
        foreach my $iter38 (@{$self->{counter32}}) 
        {
          $xfer += ${iter38}->write($output);
        }
      }
      $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{counter64}) {
    $xfer += $output->writeFieldBegin('counter64', TType::LIST, 2);
    {
      $output->writeListBegin(TType::STRUCT, scalar(@{$self->{counter64}}));
      {
        foreach my $iter39 (@{$self->{counter64}}) 
        {
          $xfer += ${iter39}->write($output);
        }
      }
      $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{gauge32}) {
    $xfer += $output->writeFieldBegin('gauge32', TType::LIST, 3);
    {
      $output->writeListBegin(TType::STRUCT, scalar(@{$self->{gauge32}}));
      {
        foreach my $iter40 (@{$self->{gauge32}}) 
        {
          $xfer += ${iter40}->write($output);
        }
      }
      $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{aggregate}) {
    $xfer += $output->writeFieldBegin('aggregate', TType::LIST, 4);
    {
      $output->writeListBegin(TType::STRUCT, scalar(@{$self->{aggregate}}));
      {
        foreach my $iter41 (@{$self->{aggregate}}) 
        {
          $xfer += ${iter41}->write($output);
        }
      }
      $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ESxSNMP::SNMPPollResultPair;
use Class::Accessor;
use base('Class::Accessor');
ESxSNMP::SNMPPollResultPair->mk_accessors( qw( OIDName value ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{OIDName} = undef;
$self->{value} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{OIDName}) {
      $self->{OIDName} = $vals->{OIDName};
    }
    if (defined $vals->{value}) {
      $self->{value} = $vals->{value};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'SNMPPollResultPair';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{OIDName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{value});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SNMPPollResultPair');
  if (defined $self->{OIDName}) {
    $xfer += $output->writeFieldBegin('OIDName', TType::STRING, 1);
    $xfer += $output->writeString($self->{OIDName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{value}) {
    $xfer += $output->writeFieldBegin('value', TType::STRING, 2);
    $xfer += $output->writeString($self->{value});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ESxSNMP::SNMPPollResult;
use Class::Accessor;
use base('Class::Accessor');
ESxSNMP::SNMPPollResult->mk_accessors( qw( device_id oidset_id timestamp vars ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{device_id} = undef;
$self->{oidset_id} = undef;
$self->{timestamp} = undef;
$self->{vars} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{device_id}) {
      $self->{device_id} = $vals->{device_id};
    }
    if (defined $vals->{oidset_id}) {
      $self->{oidset_id} = $vals->{oidset_id};
    }
    if (defined $vals->{timestamp}) {
      $self->{timestamp} = $vals->{timestamp};
    }
    if (defined $vals->{vars}) {
      $self->{vars} = $vals->{vars};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'SNMPPollResult';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{device_id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{oidset_id});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^3$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{timestamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^4$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size42 = 0;
          $self->{vars} = [];
          my $_etype45 = 0;
          $xfer += $input->readListBegin(\$_etype45, \$_size42);
          for (my $_i46 = 0; $_i46 < $_size42; ++$_i46)
          {
            my $elem47 = undef;
            {
              my $_size48 = 0;
              $elem47 = [];
              my $_etype51 = 0;
              $xfer += $input->readListBegin(\$_etype51, \$_size48);
              for (my $_i52 = 0; $_i52 < $_size48; ++$_i52)
              {
                my $elem53 = undef;
                $xfer += $input->readString(\$elem53);
                push(@{$elem47},$elem53);
              }
              $xfer += $input->readListEnd();
            }
            push(@{$self->{vars}},$elem47);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('SNMPPollResult');
  if (defined $self->{device_id}) {
    $xfer += $output->writeFieldBegin('device_id', TType::I32, 1);
    $xfer += $output->writeI32($self->{device_id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{oidset_id}) {
    $xfer += $output->writeFieldBegin('oidset_id', TType::I32, 2);
    $xfer += $output->writeI32($self->{oidset_id});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{timestamp}) {
    $xfer += $output->writeFieldBegin('timestamp', TType::I32, 3);
    $xfer += $output->writeI32($self->{timestamp});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{vars}) {
    $xfer += $output->writeFieldBegin('vars', TType::LIST, 4);
    {
      $output->writeListBegin(TType::LIST, scalar(@{$self->{vars}}));
      {
        foreach my $iter54 (@{$self->{vars}}) 
        {
          {
            $output->writeListBegin(TType::STRING, scalar(@{${iter54}}));
            {
              foreach my $iter55 (@{${iter54}}) 
              {
                $xfer += $output->writeString($iter55);
              }
            }
            $output->writeListEnd();
          }
        }
      }
      $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ESxSNMP::Rate;
use Class::Accessor;
use base('Class::Accessor');
ESxSNMP::Rate->mk_accessors( qw( timestamp rate ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{timestamp} = undef;
$self->{rate} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{timestamp}) {
      $self->{timestamp} = $vals->{timestamp};
    }
    if (defined $vals->{rate}) {
      $self->{rate} = $vals->{rate};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Rate';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{timestamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::DOUBLE) {
        $xfer += $input->readDouble(\$self->{rate});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Rate');
  if (defined $self->{timestamp}) {
    $xfer += $output->writeFieldBegin('timestamp', TType::I32, 1);
    $xfer += $output->writeI32($self->{timestamp});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{rate}) {
    $xfer += $output->writeFieldBegin('rate', TType::DOUBLE, 2);
    $xfer += $output->writeDouble($self->{rate});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package ESxSNMP::ESDBError;
use base('Thrift::TException');
use Class::Accessor;
use base('Class::Accessor');
ESxSNMP::ESDBError->mk_accessors( qw( error details ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{error} = undef;
$self->{details} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{error}) {
      $self->{error} = $vals->{error};
    }
    if (defined $vals->{details}) {
      $self->{details} = $vals->{details};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'ESDBError';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{error});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{details});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('ESDBError');
  if (defined $self->{error}) {
    $xfer += $output->writeFieldBegin('error', TType::STRING, 1);
    $xfer += $output->writeString($self->{error});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{details}) {
    $xfer += $output->writeFieldBegin('details', TType::STRING, 2);
    $xfer += $output->writeString($self->{details});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

1;
